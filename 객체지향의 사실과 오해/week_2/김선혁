## 책임과 메시지
- 자율적인 책임 : 객체지향 설계의 아름다움은 적절한 책임을 적절한 객체에게 할당하는 과정 속에서 드러난다.(약간 내가 된 것처럼...?)
- 적절한 책임이 자율적인 객체를 낳고 자율적인 객체들이 모여 유연하고 단순한 협력을 낳는다.
- 책임이 수행 방법을 제한할 정도로 너무 구체적인 것도 문제지만 협력의 의도를 명확하게 표현하지 못할 정도로 추상적인 것 역시 문제다.
- 메시지는 '무엇'이 실행될지는 명시하지만 메시지를 '어떻게' 실행할 것인지는 전적으로 수신자가 결정할 수 있다.

## 객체 지도
- 훌륭한 기능이 훌륭한 소프트웨어를 만드는 충분조건이라고 한다면 훌륭한 구조는 훌륭한 소프트웨어를 만들기 위한 필요조건이다.
- 안정적인 재료인 구조와 불안정한 재료인 기능
- 도메인 모델은 안정적인 구조를 개념화하기 위해, 유스케이스는 불안정한 기능을 서술하기 위해 가장 일반적으로 사용되는 도구다.

## 함께 모으기
- 객체지향 설계의 첫 번째 목표는 훌륭한 객체를 설계하는 것이 아니라 훌륭한 협력을 설계하는 것
- 개념 관점과 명세 관섬, 구현 관점에서 코드 바라보기
- 인터페이스와 구현을 분리하라. 다시 한 번 강조한다. 인터페이스와 구현을 분리하라.
- 프로그래머의 입장에서 구현 관점을 가장 빈번하게 사용하겠지만 실제로 훌륭한 설계를 결정하는 측면은 명세 관점인 객체의 인터페이다.


고민해볼 부분
- 좋은 협력이라는 것이 무엇일까? 꼭 쉽게 끊어지고 분리될 수 있는 관계일까?
- 구조와 기능 부분에서 기능을 사용자의 행동에 비춰 설명했는데 그럼 기능은 사용자의 행동을 담아야하기에 불안정한 것일까? 구조 또한 유연해야 하는 것 아닌가?




